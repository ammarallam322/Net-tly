@model IEnumerable<teamProject.Models.Governerate>

@{
    ViewData["Title"] = "Governerates List";
}

<div class="myMainOwnContaier">
    <div class="container myOwnContaier rounded p-5">
        <div class="row flex-nowrap justify-content-between branchHeader">
            <h2 class="fs-1 col-sm-6">Governerates List</h2>
            <h4 class="fs-2 col-sm-6 text-end">Total: @Model.Count()</h4>
        </div>

        <div class="row">
            <button id="toggleFormBtn" class="my-3 btn custom-btn btn-3"><span>+ Add Governerate</span></button>
        </div>

        <div id="governerateForm" class="card shadow p-4 mb-4 fade" style="display: none;">
            <form id="governerateFormData">
                <div class="row g-3">
                    <div class="col-md-5">
                        <label class="form-label">Name:</label>
                        <input type="text" name="Name" class="form-control" required />
                        <span class="text-danger" id="nameError"></span> <!-- مكان عرض الخطأ -->
                    </div>
                    <div class="col-md-5">
                        <label class="form-label">Code:</label>
                        <input type="text" name="Code" class="form-control" required />
                        <span class="text-danger" id="codeError"></span> <!-- مكان عرض الخطأ -->
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100">➕ Add</button>
                    </div>
                </div>
            </form>
        </div>


        <div class="row">
            <table class="table table-hover">
                <thead>
                    <tr class="p-3 border-top border-bottom">
                        <th>Governerate Name</th>
                        <th>Code</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr class="p-3 border-top border-bottom">
                            <td>@item.Name</td>
                            <td>@item.Code</td>
                            <td class="text-center">
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a href="#" class="btn btn-danger mx-2" onclick="confirmDelete(@item.Id)">
                                    <i class="fas fa-trash"></i>
                                </a>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this item?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <a href="#" id="confirmDeleteBtn" class="btn btn-danger">Yes</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>


             document.getElementById("governerateFormData").addEventListener("submit", function (event) {
            event.preventDefault(); // منع إعادة تحميل الصفحة

            let formData = new FormData(this);

            fetch("/Governerate/SaveNew", {
                method: "POST",
                body: formData
            })
            .then(response => response.json()) // تحويل الرد إلى JSON
            .then(data => {
                if (data.success) {
                    location.reload(); // تحديث الصفحة بعد النجاح
                } else {
                    // مسح الأخطاء القديمة
                    document.getElementById("nameError").innerText = data.errors.Name || "";
                    document.getElementById("codeError").innerText = data.errors.Code || "";
                }
            })
            .catch(error => console.error("Error:", error));
        });


        document.getElementById("toggleFormBtn").addEventListener("click", function () {
            let formDiv = document.getElementById("governerateForm");
            if (formDiv.style.display === "none") {
                formDiv.style.display = "block";
                setTimeout(() => formDiv.classList.add("show"), 10);
            } else {
                formDiv.classList.remove("show");
                setTimeout(() => formDiv.style.display = "none", 300);
            }
        });

        function confirmDelete(id) {
            let deleteUrl = "/Governerate/Delete/" + id; // تأكد من أن هذا الرابط صحيح وموجود في Controller
            let confirmDeleteBtn = document.getElementById("confirmDeleteBtn");

            if (confirmDeleteBtn) {
                confirmDeleteBtn.setAttribute("href", deleteUrl);
            }

            let deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
           
            deleteModal.show();
        }

    </script>
}
